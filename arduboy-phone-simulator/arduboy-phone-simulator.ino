/*
  Arduboy Phone Simulator (APS) v1.0

  Aesthetically pleasing cellphone simulant with functional DTMF keying.
  
  "Do you got phones on your game?" - unknown
  "Actually not a bad fidget. 9/10" - IGN

*/

#include <Arduboy2.h>
Arduboy2 arduboy;
BeepPin1 beep;
BeepPin2 beep2;

PROGMEM const unsigned char call[] = {0xAA, 0xA8, 0x88, 0x88, 0x88, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x11, 0x11, 0x11, 0x11, 0x10, 0x00, 0x80, 0x00, 0x02, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0x44, 0x44, 0x44, 0x44, 0x80, 0x44, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0x44, 0x95, 0x55, 0x55, 0x55, 0x55, 0x55, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x81, 0x44, 0x82, 0x22, 0x22, 0x22, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0x44, 0x95, 0xFF, 0xFD, 0x55, 0x55, 0x56, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x85, 0x44, 0x89, 0xFF, 0xFC, 0x00, 0x00, 0x02, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x15, 0x47, 0x97, 0xFF, 0xFF, 0x55, 0x55, 0x56, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x03, 0xFF, 0xFE, 0x20, 0x00, 0x02, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x17, 0xFF, 0xFF, 0x55, 0x55, 0x56, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x88, 0x88, 0x8B, 0xFF, 0xFE, 0x00, 0x00, 0x02, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x57, 0xFF, 0xFF, 0x55, 0x55, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xA2, 0x22, 0x23, 0xFF, 0xFE, 0x00, 0x00, 0x02, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x57, 0xFF, 0xFF, 0x55, 0x55, 0x56, 0x09, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x88, 0x88, 0x03, 0xFF, 0xFE, 0x00, 0x00, 0x02, 0x04, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x57, 0xFF, 0xFF, 0x55, 0x11, 0x12, 0x02, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x22, 0x23, 0xFF, 0xFE, 0x00, 0x00, 0x02, 0x01, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x57, 0xFF, 0xFF, 0x55, 0x55, 0x56, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x88, 0x00, 0x01, 0xFF, 0xFC, 0x00, 0x00, 0x02, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x55, 0xFF, 0xFD, 0x11, 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0xFF, 0xF0, 0x7F, 0xF0, 0x7F, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0xFF, 0xFD, 0x7F, 0xF5, 0xFF, 0xFD, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x83, 0xFF, 0xFC, 0x1F, 0xC1, 0xFF, 0xFC, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x57, 0xFF, 0xFF, 0x5F, 0xD3, 0xFF, 0xFD, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x57, 0xFF, 0xFF, 0xD5, 0x5F, 0xFF, 0xFC, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFF, 0xFF, 0xC0, 0x1F, 0xFF, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x57, 0xFF, 0xFF, 0xF1, 0x3F, 0xFF, 0xFD, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0xFF, 0xFF, 0xE0, 0x3F, 0xFF, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x57, 0xFF, 0xFF, 0xF5, 0x7F, 0xFF, 0xFC, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFF, 0xFF, 0xC0, 0x1F, 0xFF, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x57, 0xFF, 0xFF, 0x91, 0x1F, 0xFF, 0xFD, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x57, 0xFF, 0xFF, 0x5F, 0xC7, 0xFF, 0xFC, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFF, 0xFC, 0x1F, 0xC1, 0xFF, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x51, 0xFF, 0xF9, 0x3F, 0xF1, 0xFF, 0xF8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xF0, 0x7F, 0xF0, 0x7F, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x44, 0xFF, 0xFC, 0x44, 0x44, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0xFF, 0xFC, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x13, 0xFF, 0xFF, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3C, 0x03, 0xFF, 0xFE, 0x01, 0xE0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0xC7, 0x47, 0xFF, 0xFE, 0x46, 0x1C, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x83, 0xFF, 0xFE, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x18, 0x83, 0xFF, 0xFE, 0x09, 0xC4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x24, 0x43, 0xFF, 0xFE, 0x11, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x46, 0x24, 0x47, 0xFF, 0xFE, 0x51, 0xC2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x3C, 0x43, 0xFF, 0xFE, 0x11, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x24, 0x43, 0xFF, 0xFE, 0x11, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x24, 0x83, 0xFF, 0xFE, 0x09, 0xC4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x00, 0x83, 0xFF, 0xFE, 0x48, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xC3, 0x01, 0xFF, 0xFC, 0x06, 0x18, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3C, 0x00, 0xFF, 0xF8, 0x01, 0xE0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x38, 0x44, 0x20, 0x00, 0x00, 0x7A, 0x2F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x44, 0xA4, 0x20, 0x00, 0x00, 0x43, 0x28, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x41, 0x14, 0x20, 0x00, 0x00, 0x72, 0xA8, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x41, 0xF4, 0x20, 0x00, 0x00, 0x42, 0xA8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x14, 0x20, 0x00, 0x00, 0x42, 0x68, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x17, 0xBE, 0x00, 0x00, 0x7A, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

unsigned long aBtnStart = 0;
unsigned long bBtnStart = 0;
unsigned long lastBeepTime = 0; // time of the last beep

String number = "";
byte page = 0;
byte key = 0;
byte state = 0;
bool block = false;


// Dual tone maker
void toneage (int fA, int fB, int dur = 0) {
  beep.tone(beep.freq(fA), dur);
  beep2.tone(beep2.freq(fB), dur);
}

// Dial sequencer
void dial() {
  toneage(350, 440);
  delay(1000);
  beep.noTone(); // Stop the tone
  beep2.noTone(); // Stop the tone
  delay(50);

  for (int i = 0; i < number.length(); i++) {
    char doKey = number.charAt(i);
    switch (doKey) {
      case '1':
        toneage(1209, 697);
        break;
      case '2':
        toneage(1336, 697);
        break;
      case '3':
        toneage(1477, 697);
        break;
      case '4':
        toneage(1209, 770);
        break;
      case '5':
        toneage(1336, 770);
        break;
      case '6':
        toneage(1477, 770);
        break;
      case '7':
        toneage(1209, 852);
        break;
      case '8':
        toneage(1336, 852);
        break;
      case '9':
        toneage(1477, 852);
        break;
      case '0':
        toneage(1336, 941);
        break;
      case '#':
        toneage(1477, 941);
        break;
      case '*':
        toneage(1209, 941);
        break;
    }
    delay(100);
    beep.noTone();
    beep2.noTone();
    delay(100);

    if (doKey == ' ') {
      break;
    }
  }
}

void setup() {
  arduboy.begin();
  arduboy.setFrameRate(25);
  beep.begin();
  beep2.begin();
}

void loop() {
  if (!arduboy.nextFrame()) {
    return;
  }
  beep.timer();
  beep2.timer();
  arduboy.pollButtons();
  arduboy.clear();

  // Pretty background
  arduboy.drawSlowXYBitmap(0, 0, call, 128, 64, WHITE);


  // Change layer modifiers
  if (arduboy.justPressed(A_BUTTON)) {
    page = 1;
    //display 5678
    aBtnStart = millis();
  }

  if (arduboy.justPressed(B_BUTTON)) {
    page = 2;
    //display 90#*
    bBtnStart = millis();

  }
  if (arduboy.justReleased(A_BUTTON) || arduboy.justReleased(B_BUTTON)) {
    page = 0;
    //display 1234
  }


  // Select keying
  if (arduboy.justPressed(UP_BUTTON)) {
    block = false;
    switch (page) {
      case 0:
        key = 1;
        break;
      case 1:
        key = 5;
        break;
      case 2:
        key = 9;
        break;
    }
  }
  if (arduboy.justPressed(RIGHT_BUTTON)) {
    block = false;
    switch (page) {
      case 0:
        key = 2;
        break;
      case 1:
        key = 6;
        break;
      case 2:
        key = 10;
        break;
    }
  }
  if (arduboy.justPressed(DOWN_BUTTON)) {
    block = false;
    switch (page) {
      case 0:
        key = 3;
        break;
      case 1:
        key = 7;
        break;
      case 2:
        key = 11;
        break;
    }
  }
  if (arduboy.justPressed(LEFT_BUTTON)) {
    block = false;
    switch (page) {
      case 0:
        key = 4;
        break;
      case 1:
        key = 8;
        break;
      case 2:
        key = 12;
        break;
    }
  }


  // No key selected
  if (!arduboy.anyPressed(RIGHT_BUTTON | LEFT_BUTTON | UP_BUTTON | DOWN_BUTTON)) {
    key = 255;
    block = false;
  }


  // Key pressed?
  if ( state != 2) {
    arduboy.setTextColor(BLACK);
    switch (key) {
      case 1:
        arduboy.setCursor(27 + 1, 11 + 1);
        arduboy.print("1");
        if (!block) number += '1';
        toneage(1209, 697);
        break;
      case 2:
        arduboy.setCursor(43 + 1, 26 + 1);
        arduboy.print("2");
        if (!block) number += '2';
        toneage(1336, 697);
        break;
      case 3:
        arduboy.setCursor(27 + 1, 42 + 1);
        arduboy.print("3");
        if (!block) number += '3';
        toneage(1477, 697);
        break;
      case 4:
        arduboy.setCursor(10 + 1, 26 + 1);
        arduboy.print("4");
        if (!block) number += '4';
        toneage(1209, 770);
        break;
      case 5:
        arduboy.setCursor(27 + 1, 11 + 1);
        arduboy.print("5");
        if (!block) number += '5';
        toneage(1336, 770);
        break;
      case 6:
        arduboy.setCursor(43 + 1, 26 + 1);
        arduboy.print("6");
        if (!block) number += '6';
        toneage(1477, 770);
        break;
      case 7:
        arduboy.setCursor(27 + 1, 42 + 1);
        arduboy.print("7");
        if (!block) number += '7';
        toneage(1209, 852);
        break;
      case 8:
        arduboy.setCursor(10 + 1, 26 + 1);
        arduboy.print("8");
        if (!block) number += '8';
        toneage(1336, 852);
        break;
      case 9:
        arduboy.setCursor(27 + 1, 11 + 1);
        arduboy.print("9");
        if (!block) number += '9';
        toneage(1477, 852);
        break;
      case 10:
        arduboy.setCursor(43 + 1, 26 + 1);
        arduboy.print("0");
        if (!block) number += '0';
        toneage(1336, 941);
        break;
      case 11:
        arduboy.setCursor(27, 42 + 1);
        arduboy.print("#");
        if (!block) number += '#';
        toneage(1477, 941);
        break;
      case 12:
        arduboy.setCursor(10, 26 + 1);
        arduboy.print("*");
        if (!block) number += '*';
        toneage(1209, 941);
        break;
      default:
        beep.noTone(); // Stop the tone
        beep2.noTone(); // Stop the tone
        break;

    }
    block = true;
  }


  // Reset hold timers
  if (!arduboy.anyPressed(A_BUTTON) || key != 255) aBtnStart = millis();
  if (!arduboy.anyPressed(B_BUTTON) || key != 255 || (number.length() == 0 && state == 0)) bBtnStart = millis();

  // Call button management
  int holdTimeA = (millis() - aBtnStart) / 100;
  if (state == 0 ) {
    if (holdTimeA > 23) {
      holdTimeA = 23;
      arduboy.drawRect(1, 56, holdTimeA, 8, WHITE);
      state = 1;
    }
    else if (holdTimeA > 2) {
      arduboy.fillRect(1, 56, holdTimeA, 8, WHITE);
    }
  }


  // End button management
  int holdTimeB = (millis() - bBtnStart) / 100;
  if (holdTimeB > 18) {
    holdTimeB = 18;
    arduboy.drawRect(40, 56, holdTimeB, 8, WHITE);

    //end sounds
    if (state == 2) {
      beep.noTone(); // Stop the tone
      beep2.noTone(); // Stop the tone
      for (int i = 1; i < 8; i++) {
        beep.tone(i * 400);
        delay(80);
      }
      delay(80);
    }
    else if (number.length() > 0) {
      for (int i = 2; i >= 1; i--) {
        beep.tone(i * 400);
        delay(80);
      }
    }
    number = "";
    state = 0;
    beep.noTone(); // Stop the tone
  }
  else if (holdTimeB > 2) {
    arduboy.fillRect(40, 56, holdTimeB, 8, WHITE);
  }


  // Status bar display and ring/busy tones
  arduboy.setCursor(83, 11);
  arduboy.setTextColor(WHITE);
  switch (state) {
    case 0 :
      arduboy.print("Phone");
      break;

    case 1:
      // dial number
      arduboy.print("Dialing");
      break;

    case 2:
      arduboy.print("In Call");
      //error busy tone
      if (number.length() <= 0 || number.charAt(0) == '>') {
        if (beep.duration != 0) {
          //A tone is playing
          lastBeepTime = millis();
        }
        else {
          //tone is not playing
          if (millis() - lastBeepTime >= 250) {
            toneage(440, 620, 7);
          }
        }
      }
      //ringing
      else {
        if (beep.duration != 0) {
          //A tone is playing
          lastBeepTime = millis();
        }
        else {
          //tone is not playing
          if (millis() - lastBeepTime >= 4000) {
            toneage(440, 480, 50);
          }
        }
      }
      break;
  }


  // Print keypad base
  arduboy.setTextColor(BLACK);
  arduboy.setCursor(27 + 1, 11);
  switch (page) {
    case 0:
      arduboy.print("1");
      break;
    case 1:
      arduboy.print("5");
      break;
    case 2:
      arduboy.print("9");
      break;
  }
  arduboy.setCursor(43 + 1, 26);
  switch (page) {
    case 0:
      arduboy.print("2");
      break;
    case 1:
      arduboy.print("6");
      break;
    case 2:
      arduboy.print("0");
      break;
  }
  arduboy.setCursor(27 + 1, 42);
  switch (page) {
    case 0:
      arduboy.print("3");
      break;
    case 1:
      arduboy.print("7");
      break;
    case 2:
      arduboy.print("#");
      break;
  }
  arduboy.setCursor(10 + 1, 26);
  switch (page) {
    case 0:
      arduboy.print("4");
      break;
    case 1:
      arduboy.print("8");
      break;
    case 2:
      arduboy.print("*");
      break;
  }


  // Print dialed numbers on display
  arduboy.setTextColor(WHITE);
  for (int i = 0; i < number.length(); i++) {
    if (i <= 9) arduboy.setCursor(65 + (6 * i), 28);
    else if (i <= 19)arduboy.setCursor(65 + (6 * i) - 60, 39);
    else arduboy.setCursor(65 + (6 * i) - 120, 50);
    if (i > 29) break;
    arduboy.print((char)number.charAt(i));
  }
  if (number.length() > 30) {
    number = ">_<` Calm down now. Hold (B)  ";
  }


  //battery
  byte level = 3;
  if (millis() > 120000) level -= 2;
  arduboy.drawLine(14, 8, 14, 8 - level, WHITE);
  arduboy.drawLine(15, 8, 15, 8 - level, WHITE);


  //signal
  if (millis() > 10000 && millis() < 60000) arduboy.drawLine(9, 9, 9, 3, BLACK);


  arduboy.display();

  // Signal dial sequence after display update
  if (state == 1) {
    dial();
    state = 2; //go to ring
    lastBeepTime = millis();
  }
}
